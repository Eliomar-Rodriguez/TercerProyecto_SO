{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/backend.service.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/main-view/main-view.component.css","webpack:///./src/app/main-view/main-view.component.html","webpack:///./src/app/main-view/main-view.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Chat Program';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MainViewComponent } from './main-view/main-view.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { CommonModule } from '@angular/common';\nimport { BackendService } from './backend.service';\nconst appRoutes: Routes = [\n  { path: 'main', component: MainViewComponent },\n  { path: '', component: LoginComponent },\n  { path: '**', redirectTo: '', pathMatch: 'full' }\n];\n@NgModule({\n  declarations: [AppComponent, MainViewComponent, LoginComponent],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    FormsModule,\n    RouterModule.forRoot(appRoutes),\n    MatSidenavModule,\n    MatCheckboxModule,\n    MatListModule,\n    MatToolbarModule,\n    CommonModule\n  ],\n  exports: [MatInputModule, MatCardModule, MatButtonModule],\n  providers: [BackendService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\"; // Se importa las liibrerias del router para el enrutamiento a la pagina principal\nimport { PlatformLocation } from \"@angular/common\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class BackendService {\n  //Dirección del servidor\n  server;\n  // Registro de usuarios\n  public users = {};\n  // Registro de conversaciones\n  public chats = {};\n  constructor(\n    private _http: HttpClient,\n    private router: Router,\n    platformLocation: PlatformLocation\n  ) {\n    // Se especifica la dirección del servidor\n    this.server = (platformLocation as any).location.origin+ '/';\n  }\n  // Intenta autenticarse y enruta a la pantalla principal si es exitoso\n  login(id: string, password: string) {\n    this._http\n      .post(this.server + \"login\", { userName: id, contrasenia: password })\n      .subscribe(result => {\n        if (result[\"success\"]) {\n          // Si la autenticación es exitosa, se procede a ir a la pagina principal y se guarda la información de autenticacion\n          localStorage.setItem(\n            \"userInfo\",\n            JSON.stringify({ name: id, id: result[\"data\"][0][\"success\"] })\n          );\n          this.router.navigate([\"/main\"]);\n        }\n      });\n  }\n  // Se obtiene la lista de usuarios existentes en el servidor\n  getUsers() {\n    this._http.get(this.server + \"allUsers\").subscribe(data => {\n      if (data[\"success\"]) {\n        let newKeys = {};\n        // Castea la información recibida según los datos necesarios\n        data[\"data\"].forEach(element => {\n          this.users[element.ID] = { name: element.username };\n          newKeys[element.ID] = element.username;\n        });\n        Object.keys(this.users).forEach(element => {\n          if (newKeys[element] == undefined) {\n            this.users[element] = undefined;\n          }\n        });\n      } else {\n        this.getUsers();\n      }\n    });\n  }\n  // Obtiene la conversación con un usuario especifico\n  getChat(localID: string, remoteID: string) {\n    this._http\n      .post(this.server + \"getMessagesChat\", {\n        ID_Emiter: localID,\n        ID_Receiver: remoteID\n      })\n      .subscribe(data => {\n        this.chats[remoteID] = [];\n        if (data['success'] && data[\"data\"])\n          data[\"data\"].forEach(element => {\n            this.chats[remoteID].push({\n              id: element.ID_Emiter,\n              text: element.TextMessage\n            });\n          });\n      });\n  }\n  // Envía un mensaje a un usuario\n  sendMsg(from: string, to: string, msg: string) {\n    this._http\n      .post(this.server + \"sendMessage\", {\n        textMessage: msg,\n        ID_Emiter: from,\n        ID_Receiver: to\n      })\n      .subscribe(data => {\n        if (data[\"success\"]) {\n          this.getChat(from, to);\n        }\n      });\n  }\n}\n","module.exports = \".input-max-width {\\r\\n  width: 80%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\nmat-card {\\r\\n  width: 300px;\\r\\n  margin-top: 100px;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\"","module.exports = \"<mat-card>\\n  <mat-card-title>Iniciar Sesión</mat-card-title>\\n  <mat-card-content>\\n    <form class=\\\"example-form\\\">\\n      <mat-form-field class=\\\"input-max-width\\\">\\n        <input\\n          [(ngModel)]=\\\"user.id\\\"\\n          matInput\\n          placeholder=\\\"Usuario\\\"\\n          name=\\\"userField\\\"\\n        />\\n      </mat-form-field>\\n\\n      <mat-form-field class=\\\"input-max-width\\\">\\n        <input\\n          [(ngModel)]=\\\"user.pass\\\"\\n          type=\\\"password\\\"\\n          matInput\\n          placeholder=\\\"Contraseña\\\"\\n          name=\\\"passField\\\"\\n        />\\n      </mat-form-field>\\n    </form>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <button mat-button (click)=\\\"login()\\\">Entrar</button>\\n  </mat-card-actions>\\n</mat-card>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { BackendService } from '../backend.service'; // Se importa el servicio de backend para uso del login\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  // user contiene los datos de los campos de texto\n  user = {\n    id: '',\n    pass: ''\n  };\n  // El constructor define instancias del BackendService y el Router\n  constructor(private _Backend: BackendService) {}\n  // La unica funcion contenida se encarga de realizar el proceso de autenticacion en conjunto con el servicio de backend\n  public login() {\n    this._Backend.login(this.user.id, this.user.pass);\n  }\n\n  ngOnInit() {}\n}\n","module.exports = \".mat-sidenav {\\r\\n    width: 250px;\\r\\n}\\r\\n.msg {\\r\\n    margin: 5px;\\r\\n    max-width: 40%;\\r\\n}\\r\\n#usersContainer {\\r\\n    overflow-y: auto;\\r\\n    max-height: 80%;\\r\\n}\\r\\n#chatInput {\\r\\n    width: 80%;\\r\\n    height: 10%;\\r\\n    margin-left: 10px;\\r\\n}\\r\\n/* width */\\r\\n::-webkit-scrollbar {\\r\\n    width: 15px;\\r\\n}\\r\\n/* Track */\\r\\n::-webkit-scrollbar-track {\\r\\n    box-shadow: inset 0 0 5px grey; \\r\\n    border-radius: 3px;\\r\\n}\\r\\n/* Handle */\\r\\n::-webkit-scrollbar-thumb {\\r\\n    background: grey; \\r\\n    border-radius: 3px;\\r\\n}\\r\\n/* Handle on hover */\\r\\n::-webkit-scrollbar-thumb:hover {\\r\\n    background: grey; \\r\\n}\"","module.exports = \"<mat-sidenav-container> <!--Contenedor principal de la pagina-->\\n  <mat-sidenav mode=\\\"side\\\" opened> <!--Barra lateral-->\\n    <mat-toolbar>{{ userInfo.name }} (@{{ userInfo.id }})</mat-toolbar> <!--Información del usuario actual sobre la barra-->\\n      <mat-nav-list> <!--Contenedor de la lista de usuarios obtenidos desde la base de datos-->\\n        <span *ngFor=\\\"let user of Object.keys(_Backend.users)\\\"> <!--Este elemento se replica por cada usuario obtenido-->\\n          <a\\n            mat-list-item\\n            *ngIf=\\\"user != userInfo.id\\\"\\n            (click)=\\\"selectUser(user)\\\"\\n          > <!--Este elemento solo es visible si su ID es distinta a la actual, esto para evitar enviar mensajes a si mismo-->\\n            {{ _Backend.users[user].name }} (@{{ user }})\\n          </a>\\n        </span>\\n      </mat-nav-list>\\n    <mat-nav-list style=\\\"bottom:0;position:absolute;width: 100%\\\"> <!--Contenedor de los elementos ubicados en la parte baja de la barra lateral-->\\n      <mat-toolbar\\n        mat-list-item\\n        *ngIf=\\\"activeUser != ''\\\"\\n        style=\\\"background-color:darkgray;\\\"\\n      > <!--Este componente solo es visible cuando hay un usuario seleccionado-->\\n        <mat-form-field style=\\\"height:80%;width: 100%\\\">\\n          <input\\n            matInput\\n            [(ngModel)]=\\\"Contador\\\"\\n            placeholder=\\\"Mensajes por lotes\\\"\\n            type=\\\"number\\\"\\n          /> <!--Contador para el envío por lotes de mensajes-->\\n        </mat-form-field>\\n      </mat-toolbar>\\n      <mat-toolbar\\n        mat-list-item\\n        *ngIf=\\\"activeUser != '' && Contador > 0 && Contador < maxCounter\\\"\\n        style=\\\"background-color:darkgray;\\\"\\n      > <!--Este componente contiene el botón para enviar un lote de mensajes a un destinatario, solo es visible cuando se ha seleccionado un usuario activo y el numero de mensajes a enviar no excede el limite-->\\n        <button\\n          style=\\\"width:100%;height:100%\\\"\\n          mat-button\\n          (click)=\\\"sendLot(Contador)\\\"\\n        >\\n          Enviar {{ Contador }} mensajes a {{ activeUser }}!\\n        </button>\\n      </mat-toolbar> <!--Este contenedor tiene la función de permitir al usuario salir a la pantalla de inicio de sesión-->\\n      <a mat-list-item [routerLink]=\\\"['']\\\" style=\\\"background-color:darkgray;\\\">\\n        Logout\\n      </a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n  <mat-sidenav-content> <!--Posee la vista de chats y de envío de mensajes-->\\n    <span *ngIf=\\\"activeUser != '' && activeUser != userInfo.id\\\"> <!--Este componente no es visible si no se tiene seleccionado a un usuario distinto al usuario local-->\\n      <mat-toolbar style=\\\"background-color:darkgrey\\\">{{\\n        _Backend.users[activeUser].name\\n      }}</mat-toolbar> <!--Muestra el destinatario sobre la conversación actual-->\\n      <div\\n        ng-container\\n        *ngIf=\\\"_Backend.chats[activeUser] != undefined\\\"\\n        style=\\\"max-height:70%; overflow-y: auto\\\"\\n        id=\\\"chatLog\\\"\\n      > <!--Contiene la vista de chat-->\\n        <mat-card\\n          *ngFor=\\\"let message of _Backend.chats[activeUser]\\\"\\n          class=\\\"msg\\\"\\n          [ngStyle]=\\\"{\\n            'margin-left': message.id == userInfo.id ? 'auto' : '5px',\\n            'background-color': message.id == userInfo.id ? '#a5c7ff' : '#FFF'\\n          }\\\"\\n        > <!--Una tarjeta que se replica por cada mensaje en la conversación y muestra el contenido del mensaje, además de alinearse a la derecha o a la izquierda, según el emisor del mensaje-->\\n          {{ message.text }}\\n        </mat-card>\\n      </div>\\n\\n      <mat-form-field id=\\\"chatInput\\\"> <!--Formulario para enviar un mensaje de texto-->\\n        <textarea\\n          style=\\\"height:100%\\\"\\n          matInput\\n          placeholder=\\\"{{500-_Backend.users[activeUser].text.length}}\\\"\\n          [(ngModel)]=\\\"_Backend.users[activeUser].text\\\"\\n        ></textarea> <!--El contenido de esta caja de texto cambia y edita el chat del usuario seleccionado-->\\n      </mat-form-field>\\n      <button\\n        mat-button\\n        style=\\\"margin-left: 5%; width: 10%; background-color: darkgray ; color: white\\\"\\n        (click)=\\\"send()\\\"\\n      > <!--Boton para enviar el mensaje-->\\n        Enviar\\n      </button>\\n    </span>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\"","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\"; // Se importa las liibrerias del router para el enrutamiento a la pagina principal\nimport { BackendService } from \"../backend.service\"; // Se importa el servicio de backend para uso del login\n\n@Component({\n  selector: \"app-main-view\",\n  templateUrl: \"./main-view.component.html\",\n  styleUrls: [\"./main-view.component.css\"]\n})\nexport class MainViewComponent implements OnInit {\n  // Para utilizar desde el codigo html\n  Object = Object;\n  // Contador para tareas por lote\n  Contador = 0;\n  // Numero maximo de mensajes que se pueden enviar por tarea\n  maxCounter = 100;\n  // Donde se almacena la información de inicio de sesión del usuario\n  userInfo;\n\n  // El constructor define instancias del BackendService y el Router\n  constructor(private _Backend: BackendService, private _Router: Router) {\n    // Se obtiene la información del usuario y se retorna al login si esta no es encontrada\n    this.userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    if (this.userInfo === null) {\n      this._Router.navigate([\"\"]);\n    }\n    // Se obtienen los usuarios de la base de datos\n    this._Backend.getUsers();\n  }\n  // Identifica al usuario actual con que se está conversando\n  activeUser = \"\";\n  selectUser(user) {\n    // Selecciona a un usuario desde la interfaz, para mostrar el chat y especificar el actual destinatario de un mensaje\n    if (this._Backend.users[user].text === undefined) {\n      this._Backend.users[user].text = \"\";\n    }\n    this.activeUser = user;\n    // Se actualiza el chat con el destinatario seleccionado\n    this._Backend.getChat(this.userInfo.id, this.activeUser);\n  }\n  send() {\n    // Envia un mensaje desde el servicio de backend\n    this._Backend.sendMsg(\n      this.userInfo.id,\n      this.activeUser,\n      this._Backend.users[this.activeUser].text\n    );\n    // Limpia el cuadro de texto ya que el mensaje fue enviado\n    this._Backend.users[this.activeUser].text = \"\";\n  }\n  // Envia un conjunto de mensajes generado automaticamente\n  sendLot(C) {\n    for (let index = 0; index < C; index++) {\n      this._Backend.sendMsg(\n        this.userInfo.id,\n        this.activeUser,\n        \"Message #\" + (index + 1) + \", \" + new Date().toLocaleString()\n      );\n    }\n  }\n  ngOnInit() {\n    // Intervalo que chequea regularmente si se ha recibido un mensaje nuevo\n    setInterval(() => {\n      if (this.activeUser !== \"\") {\n        this._Backend.getChat(this.userInfo.id, this.activeUser);\n      }\n    }, 2000);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}